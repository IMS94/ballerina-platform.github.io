{"isSingleFile":false,"name":"rabbitmq","description":"\u003ch2\u003eModule Overview\u003c/h2\u003e\n\u003cp\u003eThis module contains the functionality to support messaging with the RabbitMQ broker (AMQP 0-9-1). It assumes that the most recent version of Ballerina is used and is built on top of the basics.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.rabbitmq.com/\"\u003eRabbitMQ\u003c/a\u003e is one of the most popular open-source enterprise messaging systems modelled on the Advanced Message Queuing Protocol (AMQP) standard. This guide covers the Ballerina RabbitMQ module and its public API.\u003c/p\u003e\n\u003cp\u003eKey sections include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConnecting to RabbitMQ\u003c/li\u003e\n\u003cli\u003eUsing Exchanges and Queues\u003c/li\u003e\n\u003cli\u003ePublishing Messages\u003c/li\u003e\n\u003cli\u003eConsuming Messages Using Consumer Services\u003c/li\u003e\n\u003cli\u003eClient Acknowledgements\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eConnecting to RabbitMQ\u003c/h3\u003e\n\u003cp\u003eThe following code connects to a RabbitMQ node with default host and port:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Client newClient \u003d new;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003erabbitmq:Client\u003c/code\u003e can now be used to send and receive messages as described in the subsequent sections.\u003c/p\u003e\n\u003ch4\u003eDisconnecting from RabbitMQ\u003c/h4\u003e\n\u003cp\u003eTo disconnect, simply close the open channels and the connections:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? closeResult \u003d newClient.close();\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eUsing exchanges and queues\u003c/h3\u003e\n\u003cp\u003eClient applications work with exchanges and queues, which are the high-level building blocks of the AMQP protocol. These must be declared before they can be used. The following code declares an exchange and a server-named queue and then binds them together.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? exchangeResult \u003d newClient-\u0026gt;exchangeDeclare(\u0026quot;MyExchange\u0026quot;, \n                                                                rabbitmq:DIRECT_EXCHANGE);\n   \n   string|rabbitmq:Error? queueResult \u003d newClient-\u0026gt;queueDeclare(\u0026quot;MyQueue\u0026quot;);\n   if (queueResult is string) {\n        rabbitmq:Error? bindResult \u003d newClient-\u0026gt;queueBind(\u0026quot;MyQueue\u0026quot;, \u0026quot;MyExchange\u0026quot;, \u0026quot;routing-key\u0026quot;);\n   }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sample code will declare,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea durable auto-delete exchange of the type \u003ccode\u003erabbitmq:DIRECT_EXCHANGE\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ea non-durable, exclusive auto-delete queue with an auto-generated name\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNext, the above function is called to bind the queue to the exchange with the given routing key.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? exchangeResult \u003d newClient-\u0026gt;exchangeDeclare(\u0026quot;MyExchange\u0026quot;,\n                                                        rabbitmq:DIRECT_EXCHANGE);\n   \n   string|rabbitmq:Error? queueResult \u003d newClient-\u0026gt;queueDeclare(\u0026quot;MyQueue\u0026quot;, \n                                                { durable: true,\n                                                  exclusive: false,\n                                                  autoDelete: false });\n\n   rabbitmq:Error? bindResult \u003d newClient-\u0026gt;queueBind(\u0026quot;MyQueue\u0026quot;, \u0026quot;MyExchange\u0026quot;, \u0026quot;routing-key\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sample code will declare,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea durable auto-delete exchange of the type \u003ccode\u003erabbitmq:DIRECT_EXCHANGE\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ea durable, non-exclusive non-auto-delete queue with a well-known name\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eDeleting entities and purging queues\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDelete a queue:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;queueDelete(\u0026quot;MyQueue\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDelete a queue only if it is empty:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;queueDelete(\u0026quot;MyQueue\u0026quot;, false, true);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDelete a queue only if it is unused (does not have any consumers):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;queueDelete(\u0026quot;MyQueue\u0026quot;, true, false);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDelete an exchange:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;exchangeDelete(\u0026quot;MyExchange\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003ePurge a queue (delete all of its messages):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? purgeResult \u003d newClient-\u0026gt;queuePurge(\u0026quot;MyQueue\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003ePublishing messages\u003c/h3\u003e\n\u003cp\u003eTo publish a message to an exchange, use the \u003ccode\u003ebasicPublish()\u003c/code\u003e function as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e    string message \u003d \u0026quot;Hello from Ballerina\u0026quot;;\n   rabbitmq:Error? sendResult \u003d newClient-\u0026gt;basicPublish(message.toBytes(), \u0026quot;MyQueue\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSetting other properties of the message such as routing headers can be done by using the \u003ccode\u003eBasicProperties\u003c/code\u003e record with the appropriate values.\u003c/p\u003e\n\u003ch3\u003eConsuming messages using consumer services\u003c/h3\u003e\n\u003cp\u003eThe most efficient way to receive messages is to set up a subscription using a Ballerina RabbitMQ \u003ccode\u003erabbitmq:Listener\u003c/code\u003e and any number of consumer services. The messages will then be delivered automatically as they arrive rather than having to be explicitly requested.\u003c/p\u003e\n\u003cp\u003eMultiple consumer services can be bound to one Ballerina RabbitMQ \u003ccode\u003erabbitmq:Listener\u003c/code\u003e. The queue to which the service is listening is configured in the \u003ccode\u003erabbitmq:ServiceConfig\u003c/code\u003e annotation of the service.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003elistener rabbitmq:Listener channelListener\u003d new;\n\n@rabbitmq:ServiceConfig {\n    queueName: \u0026quot;MyQueue\u0026quot;\n}\nservice rabbitmqConsumer on channelListener {\n    remote function onMessage(rabbitmq:Message message) {\n        // Do something with the message here \n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003erabbitmq:Message\u003c/code\u003e record received can be used to retrieve its contents.\u003c/p\u003e\n\u003ch3\u003eClient acknowledgements\u003c/h3\u003e\n\u003cp\u003eThe message consuming is supported by mainly two types of acknowledgement modes, which are auto acknowledgements and client acknowledgements.\nClient acknowledgements can further be divided into to two different types as positive and negative acknowledgements.\nThe default acknowledgement mode is auto-ack (messages are acknowledged immediately after consuming).\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWARNING: To ensure the reliability of receiving messages, use the client-ack mode.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe negatively-acknowledged (rejected) messages can be re-queued.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The default thread pool size used in Ballerina is the number of processors available * 2. You can configure the thread pool size by using the \u003ccode\u003eBALLERINA_MAX_POOL_SIZE\u003c/code\u003e environment variable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor information on the operations, which you can perform with this module, see the below \u003cstrong\u003eFunctions\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eFor examples on the usage of the connector, see the following.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-producer.html\"\u003eProducer Example\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-consumer.html\"\u003eConsumer Example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-consumer-with-client-acknowledgement.html\"\u003eClient Acknowledgements Example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-consumer-with-qos-settings.html\"\u003eQoS Settings Example\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","modules":[{"id":"rabbitmq","summary":"\u003cp\u003eThis module contains the functionality to support messaging with the RabbitMQ broker (AMQP 0-9-1). It assumes that the most recent version of Ballerina is used and is built on top of the basics.\u003c/p\u003e\n","description":"\u003ch2\u003eModule Overview\u003c/h2\u003e\n\u003cp\u003eThis module contains the functionality to support messaging with the RabbitMQ broker (AMQP 0-9-1). It assumes that the most recent version of Ballerina is used and is built on top of the basics.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.rabbitmq.com/\"\u003eRabbitMQ\u003c/a\u003e is one of the most popular open-source enterprise messaging systems modelled on the Advanced Message Queuing Protocol (AMQP) standard. This guide covers the Ballerina RabbitMQ module and its public API.\u003c/p\u003e\n\u003cp\u003eKey sections include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConnecting to RabbitMQ\u003c/li\u003e\n\u003cli\u003eUsing Exchanges and Queues\u003c/li\u003e\n\u003cli\u003ePublishing Messages\u003c/li\u003e\n\u003cli\u003eConsuming Messages Using Consumer Services\u003c/li\u003e\n\u003cli\u003eClient Acknowledgements\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eConnecting to RabbitMQ\u003c/h3\u003e\n\u003cp\u003eThe following code connects to a RabbitMQ node with default host and port:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Client newClient \u003d new;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003erabbitmq:Client\u003c/code\u003e can now be used to send and receive messages as described in the subsequent sections.\u003c/p\u003e\n\u003ch4\u003eDisconnecting from RabbitMQ\u003c/h4\u003e\n\u003cp\u003eTo disconnect, simply close the open channels and the connections:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? closeResult \u003d newClient.close();\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eUsing exchanges and queues\u003c/h3\u003e\n\u003cp\u003eClient applications work with exchanges and queues, which are the high-level building blocks of the AMQP protocol. These must be declared before they can be used. The following code declares an exchange and a server-named queue and then binds them together.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? exchangeResult \u003d newClient-\u0026gt;exchangeDeclare(\u0026quot;MyExchange\u0026quot;, \n                                                                rabbitmq:DIRECT_EXCHANGE);\n   \n   string|rabbitmq:Error? queueResult \u003d newClient-\u0026gt;queueDeclare(\u0026quot;MyQueue\u0026quot;);\n   if (queueResult is string) {\n        rabbitmq:Error? bindResult \u003d newClient-\u0026gt;queueBind(\u0026quot;MyQueue\u0026quot;, \u0026quot;MyExchange\u0026quot;, \u0026quot;routing-key\u0026quot;);\n   }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sample code will declare,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea durable auto-delete exchange of the type \u003ccode\u003erabbitmq:DIRECT_EXCHANGE\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ea non-durable, exclusive auto-delete queue with an auto-generated name\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNext, the above function is called to bind the queue to the exchange with the given routing key.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? exchangeResult \u003d newClient-\u0026gt;exchangeDeclare(\u0026quot;MyExchange\u0026quot;,\n                                                        rabbitmq:DIRECT_EXCHANGE);\n   \n   string|rabbitmq:Error? queueResult \u003d newClient-\u0026gt;queueDeclare(\u0026quot;MyQueue\u0026quot;, \n                                                { durable: true,\n                                                  exclusive: false,\n                                                  autoDelete: false });\n\n   rabbitmq:Error? bindResult \u003d newClient-\u0026gt;queueBind(\u0026quot;MyQueue\u0026quot;, \u0026quot;MyExchange\u0026quot;, \u0026quot;routing-key\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sample code will declare,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ea durable auto-delete exchange of the type \u003ccode\u003erabbitmq:DIRECT_EXCHANGE\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ea durable, non-exclusive non-auto-delete queue with a well-known name\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eDeleting entities and purging queues\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eDelete a queue:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;queueDelete(\u0026quot;MyQueue\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDelete a queue only if it is empty:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;queueDelete(\u0026quot;MyQueue\u0026quot;, false, true);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDelete a queue only if it is unused (does not have any consumers):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;queueDelete(\u0026quot;MyQueue\u0026quot;, true, false);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDelete an exchange:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? deleteResult \u003d newClient-\u0026gt;exchangeDelete(\u0026quot;MyExchange\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003ePurge a queue (delete all of its messages):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e   rabbitmq:Error? purgeResult \u003d newClient-\u0026gt;queuePurge(\u0026quot;MyQueue\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003ePublishing messages\u003c/h3\u003e\n\u003cp\u003eTo publish a message to an exchange, use the \u003ccode\u003ebasicPublish()\u003c/code\u003e function as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003e    string message \u003d \u0026quot;Hello from Ballerina\u0026quot;;\n   rabbitmq:Error? sendResult \u003d newClient-\u0026gt;basicPublish(message.toBytes(), \u0026quot;MyQueue\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSetting other properties of the message such as routing headers can be done by using the \u003ccode\u003eBasicProperties\u003c/code\u003e record with the appropriate values.\u003c/p\u003e\n\u003ch3\u003eConsuming messages using consumer services\u003c/h3\u003e\n\u003cp\u003eThe most efficient way to receive messages is to set up a subscription using a Ballerina RabbitMQ \u003ccode\u003erabbitmq:Listener\u003c/code\u003e and any number of consumer services. The messages will then be delivered automatically as they arrive rather than having to be explicitly requested.\u003c/p\u003e\n\u003cp\u003eMultiple consumer services can be bound to one Ballerina RabbitMQ \u003ccode\u003erabbitmq:Listener\u003c/code\u003e. The queue to which the service is listening is configured in the \u003ccode\u003erabbitmq:ServiceConfig\u003c/code\u003e annotation of the service.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-ballerina\"\u003elistener rabbitmq:Listener channelListener\u003d new;\n\n@rabbitmq:ServiceConfig {\n    queueName: \u0026quot;MyQueue\u0026quot;\n}\nservice rabbitmqConsumer on channelListener {\n    remote function onMessage(rabbitmq:Message message) {\n        // Do something with the message here \n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003erabbitmq:Message\u003c/code\u003e record received can be used to retrieve its contents.\u003c/p\u003e\n\u003ch3\u003eClient acknowledgements\u003c/h3\u003e\n\u003cp\u003eThe message consuming is supported by mainly two types of acknowledgement modes, which are auto acknowledgements and client acknowledgements.\nClient acknowledgements can further be divided into to two different types as positive and negative acknowledgements.\nThe default acknowledgement mode is auto-ack (messages are acknowledged immediately after consuming).\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWARNING: To ensure the reliability of receiving messages, use the client-ack mode.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe negatively-acknowledged (rejected) messages can be re-queued.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The default thread pool size used in Ballerina is the number of processors available * 2. You can configure the thread pool size by using the \u003ccode\u003eBALLERINA_MAX_POOL_SIZE\u003c/code\u003e environment variable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor information on the operations, which you can perform with this module, see the below \u003cstrong\u003eFunctions\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eFor examples on the usage of the connector, see the following.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-producer.html\"\u003eProducer Example\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-consumer.html\"\u003eConsumer Example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-consumer-with-client-acknowledgement.html\"\u003eClient Acknowledgements Example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"https://ballerina.io/swan-lake/learn/by-example/rabbitmq-consumer-with-qos-settings.html\"\u003eQoS Settings Example\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","orgName":"ballerinax","version":"1.0.6","records":[{"fields":[{"defaultValue":"","type":{"isAnonymousUnionType":false,"isArrayType":true,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":1,"elementType":{"name":"byte","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}},"name":"content","description":"\u003cp\u003eContent of the message\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"deliveryTag","description":"\u003cp\u003eThe delivery tag of the message\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"BasicProperties","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"properties","description":"\u003cp\u003eBasic properties of the message - routing headers etc.\u003c/p\u003e\n","isDeprecated":false}],"isClosed":true,"name":"Message","description":"\u003cp\u003eRepresents the message, which a RabbitMQ server sends to its subscribed services.\u003c/p\u003e\n","isDeprecated":false},{"fields":[{"defaultValue":"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"replyTo","description":"\u003cp\u003eThe queue name to which the other apps should send the response\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"contentType","description":"\u003cp\u003eContent type of the message\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"contentEncoding","description":"\u003cp\u003eContent encoding of the message\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"correlationId","description":"\u003cp\u003eClient-specific ID that can be used to mark or identify messages between clients\u003c/p\u003e\n","isDeprecated":false}],"isClosed":true,"name":"BasicProperties","description":"\u003cp\u003eBasic properties of the message - routing headers etc.\u003c/p\u003e\n","isDeprecated":false},{"fields":[{"defaultValue":"false","type":{"name":"boolean","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"durable","description":"\u003cp\u003eTrue if declaring a durable queue (the queue will survive in a server restart)\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"false","type":{"name":"boolean","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"exclusive","description":"\u003cp\u003eTrue if declaring an exclusive queue (restricted to this connection)\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"true","type":{"name":"boolean","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"autoDelete","description":"\u003cp\u003eTrue if declaring an auto-delete queue (the server will delete it when it is no longer in use)\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"map","category":"map","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0,"constraint":{"name":"anydata","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}},"name":"arguments","description":"\u003cp\u003eOther properties (construction arguments) for the queue\u003c/p\u003e\n","isDeprecated":false}],"isClosed":true,"name":"QueueConfig","description":"\u003cp\u003eAdditional configurations used to declare a queue.\u003c/p\u003e\n","isDeprecated":false},{"fields":[{"defaultValue":"false","type":{"name":"boolean","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"durable","description":"\u003cp\u003eTrue if declaring a durable exchange (the exchange will survive in a server restart)\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"false","type":{"name":"boolean","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"autoDelete","description":"\u003cp\u003eTrue if an autodelete exchange is declared (the server will delete it when it is no longer in use)\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"map","category":"map","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0,"constraint":{"name":"anydata","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}},"name":"arguments","description":"\u003cp\u003eOther properties (construction arguments) for the queue\u003c/p\u003e\n","isDeprecated":false}],"isClosed":true,"name":"ExchangeConfig","description":"\u003cp\u003eAdditional configurations used to declare an exchange.\u003c/p\u003e\n","isDeprecated":false},{"fields":[{"defaultValue":"\"localhost\"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"host","description":"\u003cp\u003eThe host used for establishing the connection\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"5672","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"port","description":"\u003cp\u003eThe port used for establishing the connection\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"username","description":"\u003cp\u003eThe username used for establishing the connection\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"password","description":"\u003cp\u003eThe password used for establishing the connection\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"connectionTimeoutInMillis","description":"\u003cp\u003eConnection TCP establishment timeout in milliseconds and zero for infinite\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"handshakeTimeoutMillis","description":"\u003cp\u003eThe AMQP 0-9-1 protocol handshake timeout in milliseconds\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"shutdownTimeoutInMillis","description":"\u003cp\u003eShutdown timeout in milliseconds, zero for infinite, and the default value is 10000. If the consumers exceed\nthis timeout, then any remaining queued deliveries (and other Consumer callbacks) will be lost\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"heartbeatInSeconds","description":"\u003cp\u003eThe initially-requested heartbeat timeout in seconds and zero for none\u003c/p\u003e\n","isDeprecated":false}],"isClosed":true,"name":"ConnectionConfig","description":"\u003cp\u003eConfigurations used to create a \u003ccode\u003erabbitmq:Connection\u003c/code\u003e.\u003c/p\u003e\n","isDeprecated":false},{"fields":[{"defaultValue":"","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"prefetchCount","description":"\u003cp\u003eMaximum number of messages that the server will deliver.\nGive the value as 0 if unlimited\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"","type":{"name":"int","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"prefetchSize","description":"\u003cp\u003eMaximum amount of content (measured in octets)\nthat the server will deliver and 0 if unlimited\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"false","type":{"name":"boolean","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"global","description":"\u003cp\u003eTrue if the settings should be shared among all consumers\u003c/p\u003e\n","isDeprecated":false}],"isClosed":true,"name":"QosSettings","description":"\u003cp\u003eQoS settings to limit the number of unacknowledged\nmessages on a channel.\u003c/p\u003e\n","isDeprecated":false},{"fields":[{"defaultValue":"","type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"queueName","description":"\u003cp\u003eName of the queue to be subscribed\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"true","type":{"name":"boolean","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"autoAck","description":"\u003cp\u003eIf false, should manually acknowledge\u003c/p\u003e\n","isDeprecated":false}],"isClosed":true,"name":"RabbitMQServiceConfig","description":"\u003cp\u003eConfigurations required to create a subscription.\u003c/p\u003e\n","isDeprecated":false}],"classes":[],"abstractObjects":[{"fields":[],"methods":[],"name":"Service","description":"\u003cp\u003eThe RabbitMQ service type\u003c/p\u003e\n","isDeprecated":false}],"clients":[{"remoteMethods":[],"fields":[],"methods":[],"otherMethods":[],"name":"Caller","description":"\u003cp\u003eProvides the functionality to manipulate the messages received by the consumer services.\u003c/p\u003e\n","isDeprecated":false},{"remoteMethods":[],"fields":[],"methods":[{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"{}","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"ConnectionConfig","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"connectionData","description":"\u003cp\u003eA connection configuration\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[],"name":"init","description":"\u003cp\u003eInitializes a \u003ccode\u003erabbitmq:Client\u003c/code\u003e object.\u003c/p\u003e\n","isDeprecated":false}],"initMethod":{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"{}","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"ConnectionConfig","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"connectionData","description":"\u003cp\u003eA connection configuration\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[],"name":"init","description":"\u003cp\u003eInitializes a \u003ccode\u003erabbitmq:Client\u003c/code\u003e object.\u003c/p\u003e\n","isDeprecated":false},"otherMethods":[],"name":"Client","description":"\u003cp\u003eThe Ballerina interface to provide AMQP Channel related functionality.\u003c/p\u003e\n","isDeprecated":false}],"listeners":[{"lifeCycleMethods":[{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"Service","category":"abstractObjects","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"s","description":"\u003cp\u003eType descriptor of the service\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"()","type":{"isAnonymousUnionType":true,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[{"isAnonymousUnionType":false,"isArrayType":true,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":1,"elementType":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}},{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}],"paramTypes":[],"arrayDimensions":0},"name":"name","description":"\u003cp\u003eName of the service\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to register the service\u003c/p\u003e\n","isDeprecated":false}],"name":"attach","description":"\u003cp\u003eAttaches the service to the \u003ccode\u003erabbitmq:Listener\u003c/code\u003e endpoint.\u003c/p\u003e\n","isDeprecated":false}],"fields":[],"methods":[{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"{}","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"ConnectionConfig","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"connectionData","description":"\u003cp\u003eThe connection configuration\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"()","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"QosSettings","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"qosSettings","description":"\u003cp\u003eConsumer prefetch settings\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[],"name":"init","description":"\u003cp\u003eInitializes a Listener object with the given connection configuration. Sets the global QoS settings,\nwhich will be applied to the entire \u003ccode\u003erabbitmq:Listener\u003c/code\u003e.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"Service","category":"abstractObjects","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"s","description":"\u003cp\u003eType descriptor of the service\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"()","type":{"isAnonymousUnionType":true,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[{"isAnonymousUnionType":false,"isArrayType":true,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":1,"elementType":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}},{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}],"paramTypes":[],"arrayDimensions":0},"name":"name","description":"\u003cp\u003eName of the service\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to register the service\u003c/p\u003e\n","isDeprecated":false}],"name":"attach","description":"\u003cp\u003eAttaches the service to the \u003ccode\u003erabbitmq:Listener\u003c/code\u003e endpoint.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to start\u003c/p\u003e\n","isDeprecated":false}],"name":"\u0027start","description":"\u003cp\u003eStarts consuming the messages on all the attached services.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"Service","category":"abstractObjects","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"s","description":"\u003cp\u003eType descriptor of the service\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else  a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to detach the service\u003c/p\u003e\n","isDeprecated":false}],"name":"detach","description":"\u003cp\u003eStops consuming messages and detaches the service from the \u003ccode\u003erabbitmq:Listener\u003c/code\u003e endpoint.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else  a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to close the \u003ccode\u003eChannelListener\u003c/code\u003e\u003c/p\u003e\n","isDeprecated":false}],"name":"gracefulStop","description":"\u003cp\u003eStops consuming messages through all consumer services by terminating the connection and all its channels.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else  a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to close ChannelListener.\u003c/p\u003e\n","isDeprecated":false}],"name":"immediateStop","description":"\u003cp\u003eStops consuming messages through all the consumer services and terminates the connection\nwith the server.\u003c/p\u003e\n","isDeprecated":false}],"initMethod":{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"{}","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"ConnectionConfig","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"connectionData","description":"\u003cp\u003eThe connection configuration\u003c/p\u003e\n","isDeprecated":false},{"defaultValue":"()","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"QosSettings","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"qosSettings","description":"\u003cp\u003eConsumer prefetch settings\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[],"name":"init","description":"\u003cp\u003eInitializes a Listener object with the given connection configuration. Sets the global QoS settings,\nwhich will be applied to the entire \u003ccode\u003erabbitmq:Listener\u003c/code\u003e.\u003c/p\u003e\n","isDeprecated":false},"otherMethods":[{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to start\u003c/p\u003e\n","isDeprecated":false}],"name":"\u0027start","description":"\u003cp\u003eStarts consuming the messages on all the attached services.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[{"defaultValue":"","type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"Service","category":"abstractObjects","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"s","description":"\u003cp\u003eType descriptor of the service\u003c/p\u003e\n","isDeprecated":false}],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else  a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to detach the service\u003c/p\u003e\n","isDeprecated":false}],"name":"detach","description":"\u003cp\u003eStops consuming messages and detaches the service from the \u003ccode\u003erabbitmq:Listener\u003c/code\u003e endpoint.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else  a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to close the \u003ccode\u003eChannelListener\u003c/code\u003e\u003c/p\u003e\n","isDeprecated":false}],"name":"gracefulStop","description":"\u003cp\u003eStops consuming messages through all consumer services by terminating the connection and all its channels.\u003c/p\u003e\n","isDeprecated":false},{"isIsolated":true,"isRemote":false,"isExtern":false,"parameters":[],"returnParameters":[{"type":{"name":"error","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":true,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"name":"","description":"\u003cp\u003e\u003ccode\u003e()\u003c/code\u003e or else  a \u003ccode\u003erabbitmq:Error\u003c/code\u003e upon failure to close ChannelListener.\u003c/p\u003e\n","isDeprecated":false}],"name":"immediateStop","description":"\u003cp\u003eStops consuming messages through all the consumer services and terminates the connection\nwith the server.\u003c/p\u003e\n","isDeprecated":false}],"name":"Listener","description":"\u003cp\u003eBallerina RabbitMQ Message Listener.\nProvides a listener to consume messages from the RabbitMQ server.\u003c/p\u003e\n","isDeprecated":false}],"functions":[],"constants":[{"type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"value":"\"direct\"","name":"DIRECT_EXCHANGE","description":"\u003cp\u003eConstant for the RabbitMQ Direct Exchange type.\u003c/p\u003e\n","isDeprecated":false},{"type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"value":"\"fanout\"","name":"FANOUT_EXCHANGE","description":"\u003cp\u003eConstant for the RabbitMQ Fan-out Exchange type.\u003c/p\u003e\n","isDeprecated":false},{"type":{"name":"string","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"value":"\"topic\"","name":"TOPIC_EXCHANGE","description":"\u003cp\u003eConstant for the RabbitMQ Topic Exchange type.\u003c/p\u003e\n","isDeprecated":false}],"annotations":[{"type":{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"RabbitMQServiceConfig","category":"records","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},"attachmentPoints":"service, class","name":"ServiceConfig","description":"\u003cp\u003eThe annotation, which is used to configure the subscription.\u003c/p\u003e\n","isDeprecated":false}],"errors":[{"name":"RabbitMqError","description":"\u003cp\u003eRepresents the RabbitMQ module related errors.\u003c/p\u003e\n","isDeprecated":false}],"types":[{"name":"ExchangeType","description":"\u003cp\u003eTypes of exchanges supported by the Ballerina RabbitMQ Connector.\u003c/p\u003e\n","isAnonymousUnionType":true,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[{"name":"\"direct\"","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},{"name":"\"fanout\"","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},{"name":"\"topic\"","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0},{"name":"\"headers\"","category":"builtin","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}],"paramTypes":[],"arrayDimensions":0},{"name":"Error","description":"\u003cp\u003eThe union of the RabbitMQ module related errors.\u003c/p\u003e\n","isAnonymousUnionType":true,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[{"orgName":"ballerinax","moduleName":"rabbitmq","version":"1.0.6","name":"RabbitMqError","category":"errors","isAnonymousUnionType":false,"isArrayType":false,"isNullable":false,"isTuple":false,"isIntersectionType":false,"isParenthesisedType":false,"isRestParam":false,"isLambda":false,"isDeprecated":false,"generateUserDefinedTypeLink":true,"memberTypes":[],"paramTypes":[],"arrayDimensions":0}],"paramTypes":[],"arrayDimensions":0}]}]}